{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,uCAIMC,EADOC,SAASC,cAAc,QACjBC,SAASC,YACtBC,EAAOJ,SAASC,cAAc,YAC9BI,EAASL,SAASC,cAAc,cAChCK,EAASN,SAASC,cAAc,aAClCM,EAAc,E,SAaHC,EAAiBC,G,OAAjBC,EAAgBC,MAAAC,KAAAC,U,UAAhBH,I,OAAAA,EAAfI,EAAAjB,EAAA,CAAAiB,EAAAC,GAAAC,MAAA,SAAAC,EAAgCR,G,IAEtBS,EACFC,E,4FADmB,EAAAC,EAAAC,UAASZ,EAAOF,G,OAAjCW,EAAQI,EAAAC,KACVJ,EAAgC,GAAdZ,EACtBH,EAAKoB,mBAAmB,cAAc,EAAAC,EAAAC,cAAaR,EAASS,OAC5DC,EAASC,QAAQvB,GACbY,EAASY,UAAYX,GACvBY,QAAQC,IAAI,8D,kDAGdD,QAAQE,MAAKX,EAAAY,I,2DAVcvB,MAAAC,KAAAC,U,CAc/BR,EAAO8B,iBAAiB,SAAS,SAAAC,GAC/BA,EAAMC,iBACN,IAAMC,EAAqClC,EArBhBmC,iBAAiB,eAE5BC,OAAS,EAoBzB,GAAoB,KAAhBzC,EAAM0C,MACR,OAAOV,QAAQC,IAAI,+BAGjBM,GACFlC,EAAKsC,UAAY,GAEjBlC,EADqBT,EAAM0C,QAI3BjC,EADqBT,EAAM0C,M,IA2B/B,IAAIb,EAAW,IAAIe,sBAtBnB,SAAgBC,EAASC,GACR,I,EAAfD,EAAQE,S,EAAQhC,EAAAjB,EAAA,CAAAiB,EAAAC,GAAAC,MAAA,SAAAC,EAAM8B,G,IAEZC,EAEF7B,EAEID,E,sEALN6B,EAAME,eAAc,C,uBAChBD,EAAejD,EAAM0C,MAEvBtB,EAAgC,IADpCZ,GAAe,G,mBAGU,EAAAa,EAAAC,UAAS2B,EAAczC,G,OAAxCW,EAAQI,EAAAC,KACdnB,EAAKoB,mBAAmB,aAAa,EAAAC,EAAAC,cAAaR,EAASS,OACvDT,EAASY,UAAYX,IACvB0B,EAASK,UAAU5C,GACnByB,QAAQC,IACN,+D,kDAIJD,QAAQE,MAAKX,EAAAY,I,mEAfGa,G,oCA5CV,CACZI,KAAM,KACNC,WAAY,QACZC,UAAW,G","sources":["src/js/infiniti.js"],"sourcesContent":["import { getPhoto } from './api';\nimport { createMarkup } from './markup';\n\nconst form = document.querySelector('form');\nconst input = form.elements.searchQuery;\nconst list = document.querySelector('.gallery');\nconst button = document.querySelector('.submitBtn');\nconst target = document.querySelector('.js-guard');\nlet currentPage = 1;\nlet options = {\n  root: null,\n  rootMargin: '300px',\n  threshold: 1.0,\n};\n\nfunction arePicturesPresent(container) {\n  const pictures = container.querySelectorAll('.photo-card');\n\n  return pictures.length > 0;\n}\n\nasync function getGeneralMarkup(input) {\n  try {\n    const pictures = await getPhoto(input, currentPage);\n    let valueOfPictures = currentPage * 40;\n    list.insertAdjacentHTML('afterbegin', createMarkup(pictures.hits));\n    observer.observe(target);\n    if (pictures.totalHits < valueOfPictures) {\n      console.log(\"We're sorry, but you've reached the end of search results.\");\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nbutton.addEventListener('click', event => {\n  event.preventDefault();\n  const picturesPresent = arePicturesPresent(list);\n  if (input.value === '') {\n    return console.log('please put down correct tag');\n  }\n\n  if (picturesPresent) {\n    list.innerHTML = '';\n    const currentInput = input.value;\n    getGeneralMarkup(currentInput);\n  } else {\n    const currentInput = input.value;\n    getGeneralMarkup(currentInput);\n  }\n});\n\nfunction onLoad(entries, observer) {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting) {\n      const currentInput = input.value;\n      currentPage += 1;\n      let valueOfPictures = currentPage * 40;\n      try {\n        const pictures = await getPhoto(currentInput, currentPage);\n        list.insertAdjacentHTML('beforeend', createMarkup(pictures.hits));\n        if (pictures.totalHits < valueOfPictures) {\n          observer.unobserve(target);\n          console.log(\n            \"We're sorry, but you've reached the end of search results.\"\n          );\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  });\n}\n\nlet observer = new IntersectionObserver(onLoad, options);\n"],"names":["$bpxeT","parcelRequire","$234218a4ae9f7e1a$var$input","document","querySelector","elements","searchQuery","$234218a4ae9f7e1a$var$list","$234218a4ae9f7e1a$var$button","$234218a4ae9f7e1a$var$target","$234218a4ae9f7e1a$var$currentPage","$234218a4ae9f7e1a$var$getGeneralMarkup","input1","$234218a4ae9f7e1a$var$_getGeneralMarkup","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","pictures","valueOfPictures","$b7ONl","getPhoto","_ctx","sent","insertAdjacentHTML","$1KhuP","createMarkup","hits","$234218a4ae9f7e1a$var$observer","observe","totalHits","console","log","error","t0","addEventListener","event","preventDefault","picturesPresent","querySelectorAll","length","value","innerHTML","IntersectionObserver","entries","observer1","forEach","entry","currentInput","isIntersecting","unobserve","root","rootMargin","threshold"],"version":3,"file":"infinity-scrol.6f5b9a34.js.map"}